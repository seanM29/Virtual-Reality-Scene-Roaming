uniform mat4 u_Model;
uniform mat4 u_MVP;
uniform mat4 u_MVMatrix;
uniform vec3 u_LightPos;

attribute vec4 a_Position;
attribute vec2 a_TextureCoord;
attribute vec3 a_Normal;

varying vec2 vTextureCoord;
varying vec3 vDiffuse;

void main() {
   vTextureCoord = a_TextureCoord;

     vec3 modelViewVertex = vec3(u_MVMatrix * a_Position);
  vec3 lightVector = normalize(u_LightPos - modelViewVertex);
   vec3 normal = normalize(vec3(a_Normal));
    float nDotL = max(dot(normal, lightVector), 0.0);

  vec3 modelViewNormal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));

  float distance = length(u_LightPos - modelViewVertex);
  float diffuse = max(dot(modelViewNormal, lightVector), 0.10);

  diffuse = diffuse * (1.0 / (1.0 + (0.00001 * distance * distance)));


  vDiffuse = vec3(0.5,0.5,0.5)*nDotL;

  gl_Position = u_MVP * a_Position;
}
